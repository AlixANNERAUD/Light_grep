options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(AnalyseurSyntaxique)
package fr.insarouen.iti.compilation.lightgrep.analyseurs;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import fr.insarouen.iti.compilation.lightgrep.automate.Lettre;
import fr.insarouen.iti.compilation.lightgrep.automate.LettreException;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ExpressionRationnelle;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ExpressionRationnelleElementaire;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ZeroAN;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.ZeroOuUn;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.UnAN;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.Concatenation;
import fr.insarouen.iti.compilation.lightgrep.arbreSyntaxiqueAbstrait.Union;


public class AnalyseurSyntaxique {
}

PARSER_END(AnalyseurSyntaxique)


TOKEN : {
    <CARACTERE_ECHAPE:"\\|" | "\\$" | "\\(" | "\\)" | "\\[" | "\\]" | "\\*" | "\\?" | "\\." | "\\-" | "\\$">
    | <OU:"|">
    | <PARAG:"(">
    | <PARAD:")">
    | <CROCHETG:"[">
    | <CROCHETD:"]">
    | <ZERO_N:"*">
    | <ZERO_UN:"?">
    | <UN_N:"+">
    | <JOKER:".">
    | <TIRET:"-">
    | <CIRCONFLEXE:"^">
    | <FIN_DE_LIGNE:"$">
    | <CARACTERE:["a"-"z","A"-"Z","0"-"9","!","\"","#","%","&",",","/",":",";",
            "<","=",">","?","@","^","_","`","{","|","}","~"]>
}

ExpressionRationnelle expressionRationnelle() throws LettreException :
// @u:start expressionRationnelle
{
  HashSet<ExpressionRationnelle> ensemble = new HashSet<ExpressionRationnelle>();
  ExpressionRationnelle expression1 = null, expression2 = null;
}
{
  expression1=expressionsRationnellesConcatenees() ( <OU> expression2=expressionsRationnellesConcatenees() { ensemble.add(expression2); } )* {
      ensemble.add(expression1);
      System.out.println("Union : " + ensemble.toString());
      return new Union(ensemble);
  }
}

// @u:end expressionRationnelle

ExpressionRationnelle expressionsRationnellesConcatenees()  throws LettreException :
// @u:start expressionRationnellesConcatenees
{
  ArrayList<ExpressionRationnelle> liste = new ArrayList<ExpressionRationnelle>();
  ExpressionRationnelle expression1=null, expression2 = null;
}
{
  expression1=expressionRationnelleBasique() ( expression2=expressionRationnelleBasique() { liste.add(expression2); } )* {
    liste.add(0, expression1);
    System.out.println("Concaténation : " + liste.toString());
    return new Concatenation(liste);
  }
}

// @u:end expressionRationnellesConcatenees

ExpressionRationnelle expressionRationnelleBasique() throws LettreException :
// @u:start expressionRationnelleBasique
{
  Token t = null;
  ExpressionRationnelle expression = null;
}
{
  expression=expressionRationnelleElementaire() (t = <ZERO_N>|t = <ZERO_UN>|t = <UN_N>)? 
  {
    if (t != null) {
      switch (t.kind) {
        case ZERO_N:
          System.out.println("Zero ou N : " + expression.toString());
          return new ZeroAN(expression);
        case ZERO_UN:
          System.out.println("Zero ou Un : " + expression.toString());
          return new ZeroOuUn(expression);
        case UN_N:
          System.out.println("Un ou N : " + expression.toString());
          return new UnAN(expression);
        default:
          throw new LettreException("Expression rationnelle basique incorrecte"); // Impossible car l'analyseur syntatique ne devrait pas accepter ce cas.
      }
    }
    else {
      System.out.println("Expression rationnelle basique : " + expression.toString());
      return expression;
    }

  }
}

// @u:end expressionRationnelleBasique

ExpressionRationnelle expressionRationnelleElementaire() throws LettreException :
// @u:start expressionRationnelleElementaire
{
  Token t = null;
  Lettre l = null;
  Set<Lettre> ensemble = null;
  ExpressionRationnelle expression = null;
}
{
  <PARAG> expression=expressionRationnelle() <PARAD> { return expression; }
  | l=lettre() {
    System.out.println("ERE : " + l.toString());
    return new ExpressionRationnelleElementaire(l);
  }
  | <JOKER> { return new ExpressionRationnelleElementaire(Lettre.toutesLesLettresPossibles()); }
  | <CROCHETG> (t = <CIRCONFLEXE>)? ensemble=ensembleDeLettres() <CROCHETD> { 
    if (t != null) {
      ensemble = Lettre.lettresComplementaires(ensemble);
    }
    return new ExpressionRationnelleElementaire(ensemble);
  }
}

// @u:end expressionRationnelleElementaire

Set<Lettre> ensembleDeLettres() throws LettreException :
// @u:start ensembleDeLettres
{
  Set<Lettre> resultat = new HashSet<Lettre>();
  Set<Lettre> elements1 = null, elements2 = null;
}
{
  elements1 = elementsEnsembleDeLettres() ( elements2=elementsEnsembleDeLettres() { resultat.addAll(elements2); } )* {
    resultat.addAll(elements1);
    System.out.println("Ensemble de lettres : " + resultat.toString());
    return resultat;
  }
}

// @u:end ensembleDeLettres

Set<Lettre> elementsEnsembleDeLettres() throws LettreException :
// @u:start elementsEnsembleDeLettres
{
  Lettre l1 = null, l2 = null;
  Set<Lettre> ensemble = null;
}
{
  l1 = lettre() ( <TIRET> l2 = lettre() )? 
  {   
    if (l2 != null) {
      ensemble = Lettre.toutesLesLettresComprisesEntre(l1, l2);
    } else {
      ensemble = new HashSet<Lettre>();
      ensemble.add(l1);
    }
    System.out.println("Ensemble de lettres : " + ensemble.toString());
    return ensemble;
  }
}

// @u:end elementsEnsembleDeLettres

Lettre lettre() :
// @u:start lettre
{
  Token t;
}
{
  t = <CARACTERE> { 
    System.out.println("Lettre : " + t.image.charAt(0));
    return new Lettre(t.image.charAt(0));
  }
  | t = <CARACTERE_ECHAPE> { 
    System.out.println("Lettre échappée : " + t.image.charAt(1));
    return new Lettre(t.image.charAt(1));
  }
}

// @u:end lettre
